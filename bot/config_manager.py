"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Discord –±–æ—Ç–∞ MineBuild.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
"""

import os
import json
import logging
from typing import Dict, Any, Optional
from pathlib import Path

logger = logging.getLogger("MineBuildBot.Config")


class BotConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞."""
    
    def __init__(self, config_path: str = "data/config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_path = Path(config_path)
        self.config_data = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.config_path.parent.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._load_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return {
            # === DISCORD –ù–ê–°–¢–†–û–ô–ö–ò ===
            "discord": {
                "guild_id": int(os.getenv('GUILD_ID', 0)),
                "roles": {
                    "moderator": 1277399739561672845,
                    "whitelist": 1150073275184074803,
                    "candidate": 1187064873847365752,
                    "donator": 1153006749218000918,
                    "minebuild_member": 1150073275184074804
                },
                "channels": {
                    "log": 1277415977549566024,
                    "candidate_chat": 1362437237513519279,
                    "donation": 1152974439311487089,
                    "application": 1360709668770418789
                }
            },
            
            # === –î–û–ù–ê–¢–´ ===
            "donations": {
                "enabled": True,  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–Ω–∞—Ç–æ–≤
                "thresholds": {
                    "thank_message": 100,      # –ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    "role": 300,               # –†–æ–ª—å –¥–æ–Ω–∞—Ç–µ—Ä–∞
                    "suffix": 500,             # –°—É—Ñ—Ñ–∏–∫—Å –≤ –∏–≥—Ä–µ
                    "individual_suffix": 1000  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
                },
                "rewards": {
                    "thank_message_enabled": True,    # –í–∫–ª—é—á–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    "role_enabled": True,             # –í–∫–ª—é—á–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ –¥–æ–Ω–∞—Ç–µ—Ä–∞
                    "suffix_enabled": True,           # –í–∫–ª—é—á–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å –≤ –∏–≥—Ä–µ
                    "individual_suffix_enabled": True # –í–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
                },
                "minecraft_commands": {
                    "suffix_command": "lp user {nickname} permission set title.u.donate",
                    "whitelist_add_command": "whitelist add {nickname}",
                    "whitelist_remove_command": "whitelist remove {nickname}"
                }
            },
            
            # === MINECRAFT RCON ===
            "minecraft": {
                "rcon": {
                    "timeout": 10,           # –¢–∞–π–º–∞—É—Ç –¥–ª—è RCON –∫–æ–º–∞–Ω–¥ (—Å–µ–∫—É–Ω–¥—ã)
                    "general_timeout": 15    # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–µ–∫—É–Ω–¥—ã)
                }
            },
            
            # === –°–ò–°–¢–ï–ú–ê ===
            "system": {
                "timeouts": {
                    "shutdown_normal_tasks": 5,    # –¢–∞–π–º–∞—É—Ç –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    "shutdown_system_tasks": 2,    # –¢–∞–π–º–∞—É—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    "api_request": 10               # –¢–∞–π–º–∞—É—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤
                },
                "application": {
                    "deduplication_window": 60      # –û–∫–Ω–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ (—Å–µ–∫—É–Ω–¥—ã)
                }
            },
            
            # === –°–û–û–ë–©–ï–ù–ò–Ø –ò –¢–ï–ö–°–¢–´ ===
            "messages": {
                "welcome": {
                    "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ MineBuild!",
                    "description": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä.",
                    "color": 0x00E5A1
                },
                "donation": {
                    "title": "–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç!",
                    "color": 0x68caff,
                    "footer": "MineBuild Donations"
                },
                "errors": {
                    "minecraft_unavailable": "–°–µ—Ä–≤–µ—Ä Minecraft –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
                    "insufficient_permissions": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    "user_not_found": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    "nickname_invalid": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º Minecraft."
                }
            },
            
            # === –í–ê–õ–ò–î–ê–¶–ò–Ø ===
            "validation": {
                "minecraft_nickname": {
                    "min_length": 3,
                    "max_length": 16,
                    "pattern": "^[a-zA-Z0-9_]+$"
                }
            },
            
            # === –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===
            "_metadata": {
                "version": "1.0.0",
                "created_at": None,
                "updated_at": None,
                "updated_by": None
            }
        }
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                
                # –ú–µ—Ä–¥–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                default_config = self._get_default_config()
                self.config_data = self._merge_configs(default_config, loaded_config)
                
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_path}")
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.config_data = self._get_default_config()
                self._save_config()
                logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_path}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.config_data = self._get_default_config()
    
    def _merge_configs(self, default: dict, loaded: dict) -> dict:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –º–µ—Ä–¥–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π."""
        result = default.copy()
        
        for key, value in loaded.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._merge_configs(result[key], value)
            else:
                result[key] = value
        
        return result
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            import datetime
            self.config_data["_metadata"]["updated_at"] = datetime.datetime.now().isoformat()
            
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get(self, path: str, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø—É—Ç–∏.
        
        Args:
            path: –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ—á–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "discord.roles.moderator")
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ default
        """
        try:
            keys = path.split('.')
            value = self.config_data
            
            for key in keys:
                value = value[key]
            
            return value
            
        except (KeyError, TypeError):
            return default
    
    def set(self, path: str, value: Any, save: bool = True) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø—É—Ç–∏.
        
        Args:
            path: –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ—á–∫–∞–º–∏
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            save: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            keys = path.split('.')
            target = self.config_data
            
            # –ù–∞–≤–∏–≥–∏—Ä—É–µ–º—Å—è –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
            for key in keys[:-1]:
                if key not in target:
                    target[key] = {}
                target = target[key]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            target[keys[-1]] = value
            
            if save:
                self._save_config()
            
            logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {path} = {value}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {path}: {e}")
            return False
    
    def update_multiple(self, updates: Dict[str, Any], save: bool = True) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        
        Args:
            updates: –°–ª–æ–≤–∞—Ä—å –ø—É—Ç—å -> –∑–Ω–∞—á–µ–Ω–∏–µ
            save: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã
        """
        success = True
        
        for path, value in updates.items():
            if not self.set(path, value, save=False):
                success = False
        
        if save and success:
            self._save_config()
        
        return success
    
    def validate_discord_ids(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Discord ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        for role_name in ["moderator", "whitelist", "candidate", "donator", "minebuild_member"]:
            role_id = self.get(f"discord.roles.{role_name}")
            results[f"role_{role_name}"] = isinstance(role_id, int) and role_id > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        for channel_name in ["log", "candidate_chat", "donation", "application"]:
            channel_id = self.get(f"discord.channels.{channel_name}")
            results[f"channel_{channel_name}"] = isinstance(channel_id, int) and channel_id > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Guild ID
        guild_id = self.get("discord.guild_id")
        results["guild_id"] = isinstance(guild_id, int) and guild_id > 0
        
        return results
    
    def get_admin_panel_config(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
        
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        """
        return {
            "discord": {
                "guild_id": self.get("discord.guild_id"),
                "roles": {
                    "moderator": {
                        "id": self.get("discord.roles.moderator"),
                        "name": "–†–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                        "description": "–†–æ–ª—å, –¥–∞—é—â–∞—è –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–æ—Ç–µ"
                    },
                    "whitelist": {
                        "id": self.get("discord.roles.whitelist"),
                        "name": "–†–æ–ª—å whitelist",
                        "description": "–†–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"
                    },
                    "candidate": {
                        "id": self.get("discord.roles.candidate"),
                        "name": "–†–æ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                        "description": "–†–æ–ª—å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
                    },
                    "donator": {
                        "id": self.get("discord.roles.donator"),
                        "name": "–†–æ–ª—å –¥–æ–Ω–∞—Ç–µ—Ä–∞",
                        "description": "–†–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –¥–æ–Ω–∞—Ç"
                    },
                    "minebuild_member": {
                        "id": self.get("discord.roles.minebuild_member"),
                        "name": "–†–æ–ª—å –ú–∞–π–Ω–±–∏–ª–¥–æ–≤—Ü–∞",
                        "description": "–†–æ–ª—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"
                    }
                },
                "channels": {
                    "log": {
                        "id": self.get("discord.channels.log"),
                        "name": "–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤",
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"
                    },
                    "candidate_chat": {
                        "id": self.get("discord.channels.candidate_chat"),
                        "name": "–ß–∞—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
                    },
                    "donation": {
                        "id": self.get("discord.channels.donation"),
                        "name": "–ö–∞–Ω–∞–ª –¥–æ–Ω–∞—Ç–æ–≤",
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ–Ω–∞—Ç–∞—Ö"
                    },
                    "application": {
                        "id": self.get("discord.channels.application"),
                        "name": "–ö–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫",
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"
                    }
                }
            },
            "donations": {
                "enabled": {
                    "value": self.get("donations.enabled"),
                    "name": "–°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤",
                    "description": "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–Ω–∞—Ç–æ–≤"
                },
                "thresholds": {
                    "thank_message": {
                        "value": self.get("donations.thresholds.thank_message"),
                        "name": "–ü–æ—Ä–æ–≥ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
                        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (‚ÇΩ)"
                    },
                    "role": {
                        "value": self.get("donations.thresholds.role"),
                        "name": "–ü–æ—Ä–æ–≥ —Ä–æ–ª–∏",
                        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–æ–Ω–∞—Ç–µ—Ä–∞ (‚ÇΩ)"
                    },
                    "suffix": {
                        "value": self.get("donations.thresholds.suffix"),
                        "name": "–ü–æ—Ä–æ–≥ —Å—É—Ñ—Ñ–∏–∫—Å–∞",
                        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–∞ –≤ –∏–≥—Ä–µ (‚ÇΩ)"
                    },
                    "individual_suffix": {
                        "value": self.get("donations.thresholds.individual_suffix"),
                        "name": "–ü–æ—Ä–æ–≥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞",
                        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (‚ÇΩ)"
                    }
                },
                "rewards": {
                    "thank_message": {
                        "value": self.get("donations.rewards.thank_message_enabled"),
                        "name": "–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        "description": "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –¥–æ–Ω–∞—Ç"
                    },
                    "role": {
                        "value": self.get("donations.rewards.role_enabled"),
                        "name": "–†–æ–ª—å –¥–æ–Ω–∞—Ç–µ—Ä–∞",
                        "description": "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ –¥–æ–Ω–∞—Ç–µ—Ä–∞"
                    },
                    "suffix": {
                        "value": self.get("donations.rewards.suffix_enabled"),
                        "name": "–°—É—Ñ—Ñ–∏–∫—Å –≤ –∏–≥—Ä–µ",
                        "description": "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—ã–¥–∞—á—É —Å—É—Ñ—Ñ–∏–∫—Å–∞ –≤ Minecraft"
                    },
                    "individual_suffix": {
                        "value": self.get("donations.rewards.individual_suffix_enabled"),
                        "name": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å",
                        "description": "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –≤ –∏–≥—Ä–µ"
                    }
                },
                "commands": {
                    "suffix": {
                        "value": self.get("donations.minecraft_commands.suffix_command"),
                        "name": "–ö–æ–º–∞–Ω–¥–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞",
                        "description": "Minecraft –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥–æ–Ω–∞—Ç–µ—Ä–∞"
                    },
                    "whitelist_add": {
                        "value": self.get("donations.minecraft_commands.whitelist_add_command"),
                        "name": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist",
                        "description": "Minecraft –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ whitelist"
                    },
                    "whitelist_remove": {
                        "value": self.get("donations.minecraft_commands.whitelist_remove_command"),
                        "name": "–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist",
                        "description": "Minecraft –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏–∑ whitelist"
                    }
                }
            },
            "system": {
                "timeouts": {
                    "rcon": {
                        "value": self.get("minecraft.rcon.timeout"),
                        "name": "–¢–∞–π–º–∞—É—Ç RCON",
                        "description": "–¢–∞–π–º–∞—É—Ç –¥–ª—è RCON –∫–æ–º–∞–Ω–¥ (—Å–µ–∫—É–Ω–¥—ã)"
                    },
                    "api": {
                        "value": self.get("system.timeouts.api_request"),
                        "name": "–¢–∞–π–º–∞—É—Ç API",
                        "description": "–¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)"
                    }
                }
            }
        }
    
    def get_simple_config(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
        
        Returns:
            –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è config.json
        """
        return {
            "discord": {
                "guild_id": self.get("discord.guild_id"),
                "roles": {
                    "moderator": self.get("discord.roles.moderator"),
                    "whitelist": self.get("discord.roles.whitelist"),
                    "candidate": self.get("discord.roles.candidate"),
                    "donator": self.get("discord.roles.donator"),
                    "minebuild_member": self.get("discord.roles.minebuild_member")
                },
                "channels": {
                    "log": self.get("discord.channels.log"),
                    "candidate_chat": self.get("discord.channels.candidate_chat"),
                    "donation": self.get("discord.channels.donation"),
                    "application": self.get("discord.channels.application")
                }
            },
            "donations": {
                "enabled": self.get("donations.enabled"),
                "thresholds": {
                    "thank_message": self.get("donations.thresholds.thank_message"),
                    "role": self.get("donations.thresholds.role"),
                    "suffix": self.get("donations.thresholds.suffix"),
                    "individual_suffix": self.get("donations.thresholds.individual_suffix")
                },
                "rewards": {
                    "thank_message_enabled": self.get("donations.rewards.thank_message_enabled"),
                    "role_enabled": self.get("donations.rewards.role_enabled"),
                    "suffix_enabled": self.get("donations.rewards.suffix_enabled"),
                    "individual_suffix_enabled": self.get("donations.rewards.individual_suffix_enabled")
                },
                "minecraft_commands": {
                    "suffix_command": self.get("donations.minecraft_commands.suffix_command"),
                    "whitelist_add_command": self.get("donations.minecraft_commands.whitelist_add_command"),
                    "whitelist_remove_command": self.get("donations.minecraft_commands.whitelist_remove_command")
                }
            },
            "system": {
                "timeouts": {
                    "shutdown_normal_tasks": self.get("system.timeouts.shutdown_normal_tasks"),
                    "shutdown_system_tasks": self.get("system.timeouts.shutdown_system_tasks"),
                    "api_request": self.get("system.timeouts.api_request")
                },
                "application": {
                    "deduplication_window": self.get("system.application.deduplication_window")
                }
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config_instance: Optional[BotConfig] = None


def get_config() -> BotConfig:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global _config_instance
    if _config_instance is None:
        _config_instance = BotConfig()
    return _config_instance


def reload_config() -> BotConfig:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
    global _config_instance
    _config_instance = BotConfig()
    return _config_instance


# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def get_moderator_role_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    return get_config().get("discord.roles.moderator", 0)


def get_whitelist_role_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–æ–ª–∏ whitelist."""
    return get_config().get("discord.roles.whitelist", 0)


def get_candidate_role_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–æ–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    return get_config().get("discord.roles.candidate", 0)


def get_donator_role_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–æ–ª–∏ –¥–æ–Ω–∞—Ç–µ—Ä–∞."""
    return get_config().get("discord.roles.donator", 0)


def get_log_channel_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤."""
    return get_config().get("discord.channels.log", 0)


def get_donation_channel_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–æ–Ω–∞—Ç–æ–≤."""
    return get_config().get("discord.channels.donation", 0)


def get_application_channel_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –∑–∞—è–≤–æ–∫."""
    return get_config().get("discord.channels.application", 0)


def get_candidate_chat_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    return get_config().get("discord.channels.candidate_chat", 0)


def get_donation_thresholds() -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –¥–æ–Ω–∞—Ç–æ–≤."""
    config = get_config()
    return {
        "thank_message": config.get("donations.thresholds.thank_message", 100),
        "role": config.get("donations.thresholds.role", 300),
        "suffix": config.get("donations.thresholds.suffix", 500),
        "individual_suffix": config.get("donations.thresholds.individual_suffix", 1000)
    }


def get_rcon_timeout() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è RCON –∫–æ–º–∞–Ω–¥."""
    return get_config().get("minecraft.rcon.timeout", 10)


def get_rcon_general_timeout() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è RCON –æ–ø–µ—Ä–∞—Ü–∏–π."""
    return get_config().get("minecraft.rcon.general_timeout", 15)


def get_shutdown_timeouts() -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    config = get_config()
    return {
        "normal_tasks": config.get("system.timeouts.shutdown_normal_tasks", 5),
        "system_tasks": config.get("system.timeouts.shutdown_system_tasks", 2)
    }


def get_minebuild_member_role_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–æ–ª–∏ –º–∞–π–Ω–±–∏–ª–¥–æ–≤—Ü–∞."""
    return get_config().get("discord.roles.minebuild_member", 0)


def get_minecraft_commands() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã Minecraft."""
    config = get_config()
    return {
        "suffix": config.get("donations.minecraft_commands.suffix_command", "lp user {nickname} permission set title.u.donate"),
        "whitelist_add": config.get("donations.minecraft_commands.whitelist_add_command", "whitelist add {nickname}"),
        "whitelist_remove": config.get("donations.minecraft_commands.whitelist_remove_command", "whitelist remove {nickname}")
    }


def get_donation_rewards_config() -> Dict[str, bool]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –¥–æ–Ω–∞—Ç—ã."""
    config = get_config()
    return {
        "thank_message": config.get("donations.rewards.thank_message_enabled", True),
        "role": config.get("donations.rewards.role_enabled", True),
        "suffix": config.get("donations.rewards.suffix_enabled", True),
        "individual_suffix": config.get("donations.rewards.individual_suffix_enabled", True)
    }


def is_donations_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤."""
    return get_config().get("donations.enabled", True)
