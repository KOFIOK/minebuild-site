from quart import Quart, render_template, request, jsonify
import discord
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

app = Quart(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ embed
MAX_FIELD_LENGTH = 1024

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
formQuestions = [
    {
        'id': 'discord',
        'question': '–í–∞—à Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'type': 'number',
        'required': True
    },
    {
        'id': 'nickname',
        'question': '–í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft',
        'type': 'text',
        'required': True
    },
    {
        'id': 'age',
        'question': '–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç',
        'type': 'number',
        'required': True
    },
    {
        'id': 'experience',
        'question': '–û–ø—ã—Ç –∏–≥—Ä—ã –≤ Minecraft',
        'type': 'radio',
        'required': True
    },
    {
        'id': 'gameplay',
        'question': '–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å—Ç–∏–ª—å –∏–≥—Ä—ã',
        'type': 'text',
        'required': True
    },
    {
        'id': 'important',
        'question': '–ß—Ç–æ –¥–ª—è –≤–∞—Å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö?',
        'type': 'text',
        'required': True
    },
    {
        'id': 'about',
        'question': '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ',
        'type': 'textarea',
        'required': True
    },
    {
        'id': 'biography',
        'question': '–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é',
        'type': 'textarea',
        'required': True
    }
]

def split_long_text(text, max_length):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Å–ª–æ–≤"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    words = text.split()
    
    for word in words:
        if len(current_part) + len(word) + 1 <= max_length:
            current_part += (" " + word if current_part else word)
        else:
            parts.append(current_part)
            current_part = word
    
    if current_part:
        parts.append(current_part)
    
    return parts

@app.route('/')
async def index():
    return await render_template('index.html')

@app.route('/about')
async def about():
    return await render_template('about.html')

@app.route('/rules')
async def rules():
    return await render_template('rules.html')

@app.route('/build')
async def build():
    return await render_template('build.html')

@app.route('/apply')
async def apply():
    return await render_template('apply.html')

@app.route('/api/submit-application', methods=['POST'])
async def submit_application():
    try:
        print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏")
        data = await request.get_json()
        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)
        
        if not data:
            print("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return jsonify({"status": "error", "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['discord', 'nickname', 'age', 'experience', 'about', 'biography']
        missing_fields = [field for field in required_fields if not data.get(field)]
        
        if missing_fields:
            print(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
            return jsonify({
                "status": "error",
                "message": f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Discord ID
        discord_id = str(data['discord'])
        try:
            user = await app.bot.fetch_user(discord_id)
        except discord.NotFound:
            return jsonify({
                "status": "error",
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Discord ID –Ω–µ –Ω–∞–π–¥–µ–Ω."
            }), 400

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–∏–ª—å–¥–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç
        guilds = app.bot.guilds
        member = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∏–∑ –≥–∏–ª—å–¥–∏–π
        for guild in guilds:
            try:
                member = await guild.fetch_member(user.id)
                break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except discord.NotFound:
                continue  # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

        if member is None:
            return jsonify({
                "status": "error",
                "message": "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∏—Å–∫–æ—Ä–¥-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."
            }), 403

        # –°–æ–∑–¥–∞–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = discord.Embed(
            title="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
            color=0x00E5A1,
            timestamp=datetime.now()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã
        for field in formQuestions:
            value = str(data.get(field['id'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            if len(value) > MAX_FIELD_LENGTH:
                parts = split_long_text(value, MAX_FIELD_LENGTH)
                for i, part in enumerate(parts, 1):
                    embed.add_field(
                        name=f"{field['question']} (—á–∞—Å—Ç—å {i}/{len(parts)})",
                        value=part,
                        inline=False
                    )
            else:
                embed.add_field(
                    name=field['question'],
                    value=value,
                    inline=False
                )

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        channel_id = 1360709668770418789
        channel = app.bot.get_channel(channel_id)
        
        if not channel:
            print(f"–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return jsonify({
                "status": "error",
                "message": "–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }), 500

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bot.py
        from bot import create_application_message
        success = await create_application_message(channel, discord_id, embed)
        
        if not success:
            return jsonify({
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Discord"
            }), 500

        print("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

if __name__ == '__main__':
    app.run(debug=True)